// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id String @id
  username String @unique
  displayName String
  email String?
  passwordHash String?
  googleId String? @unique
  avatarUrl String?
  bio String?
  sessions Session[]
  posts Post[]
  followers Follow[] @relation("Followers")
  followings Follow[] @relation("Followings")
  postLikes PostLike[]
  bookmarks Bookmark[]
  comments Comment[]
  receivedNotifications Notification[] @relation("Recipient")
  issuedNotifications Notification[] @relation("Issuer")
  createdAt DateTime @default(now())

  @@map("users") //table renaming
}

model Session {
 id String @id 
 userId String
 expiresAt DateTime
 user User @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@map("sessions")
}

model Post {
  id String @id @default(cuid())
  content String
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments PostMedia[]
  likes PostLike[]
  bookmarks Bookmark[]
  comments Comment[]
  linkedNotifications Notification[]
  createdAt DateTime @default(now())

  @@map("posts")
}

model Follow {
  followerId String
  follower User @relation("Followings", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following User @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model PostMedia {
  id String @id @default(cuid())
  postId String?
  post Post? @relation(fields: [postId], references: [id], onDelete: SetNull)
  type MediaType
  url String
  createdAt DateTime @default(now())
  @@map("post_media")
}

enum MediaType {
  IMAGE
  VIDEO
}

model PostLike {
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId])
  @@map("post_likes")
}

model Bookmark {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Comment {
  id String @id @default(cuid())
  content String
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  linkedNotifications Notification[]
  createdAt DateTime @default(now())
  
  @@map("comments")
}

model Notification {
  id String @id @default(cuid())
  recipientId String
  recipient User @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId String
  issuer User @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId String?
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentId String?
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  type NotificationType
  read Boolean @default(false)
  createdAt DateTime @default(now())
  @@map("notifications")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}